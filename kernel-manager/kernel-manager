#!/usr/bin/env bash
#
# kernel-manager - A simple script to manage kernels
#
# <Author>
#       Name: Yamada Hayao
#      Email: hayao@fascode.net
#    Twitter: @Hayao0819
#  Instagram: @Hayao0819
#     GitHub: @Hayao0819
#     GitLab: @Hayao0819
#     Blog: http://hayao.fascode.net
#
# <LICENSE>
# "THE MIT SUSHI-WARE LICENSE"
#
# Copyright 2022 Yamada Hayao
#
# - You agree that "the author (copyright holder) is not responsible for the software".
# - You place a copyright notice or this permission notice on all copies of the Software or any other material part of the Software.
#
# If the above two conditions are met, the following rights are granted.
#
# - The right to use, copy, modify and redistribute without charge and without restriction.
# - The right to buy the author (copyright holder) of the software a bowl of sushiüç£.
#
# based [SUSHI-WARE LICENSE](https://github.com/MakeNowJust/sushi-ware)
#
# <Special thanks>
# https://youtu.be/-iFEKeULaIo
#


#-- Config --#
PRODUCT_VERSION="20220909"
BACKUP_DIR="/etc/kernel-manager/backup/"
SOURCE_BACKUP_DIR="${BACKUP_DIR%/}/source/"
KERNEL_BACKUP_DIR="${BACKUP_DIR%/}/kernel/"
INITRAMFS_BACKUP_DIR="${BACKUP_DIR%/}/initramfs/"
CONFIG_BACKUP_DIR="${BACKUP_DIR%/}/config/"
ARCHIVE_FORMAT=".tar.gz"
KERNEL_FILES=(
    "/boot/System.map-%VERSION%"
    "/boot/config-%VERSION%"
    "/boot/initramfs-%VERSION%.img"
    "/boot/vmlinuz-%VERSION%"
)


#-- Internal Config --#
ListCommand_Options_Raw=false
ListCommand_Options_Latest=false

#-- Load library --#
set -Eeuo pipefail

# shellcheck source=/dev/null
#source <(curl -sL "https://github.com/Hayao0819/FasBashLib/releases/download/v0.2.5.1/fasbashlib.sh")
source <(curl -sL "https://raw.githubusercontent.com/Hayao0819/FasBashLib/3c3e4629d18c9e6c4f4956a27962e86e3f4c1798/fasbashlib.sh")

FileList(){
    find "$1" -mindepth 1 -maxdepth 1 -type f
}

DirList(){
    find "$1" -mindepth 1 -maxdepth 1 -type d
}

HelpDoc(){
    echo "Kernel manager for Gentoo Linux"
    echo
    echo " Usage: kernel-manager [options] <command> [args]"
    echo
    echo "General options:"
    echo "    -h | --help      Show this help message"
    echo
    echo "List options:"
    echo "    --latest         Show only latest backup"
    echo "    --raw            Output raw data (list command)"
    echo
    echo "Commands:"
    echo "  <General>"
    echo "     help                               | Show this help message"
    echo "     version                            | Show version"
    echo "  <List>                                |"
    echo "     list-source                        | List all source kernels"
    echo "     list-kernel                        | List all installed kernels"
    echo "  <Build>                               |"
    echo "     build-kernel    [kernel]           | Build kernel (run 'make')"
    #echo "     build-initramfs [kernel]           | Build initramfs"
    #echo "  <Install>                             |"
    #echo "     install [kernel]                   | Configure, compile, and install the kernel"
    #echo "     install-kernel  [kernel]           | Install the kernel (run 'make install')"
    #echo "     install-modules [kernel]           | Install the kernel modules (run 'make modules_install')"
    #echo "  <Remove>                              |"
    #echo "     remove [kernel]                    | Remove all files (kernel, modules, config)"
    #echo "     remove-source [kernel]             | Remove the kernel source"
    #echo "     remove-kernel [kernel]             | Remove the kernel"
    #echo "     remove-config [kernel]             | Remove the kernel config"
    #echo "     remove-initramfs [kernel]          | Remove initramfs"
    echo "  <Backup>                              |"
    #echo "     backup [kernel]                    | Backup all files (source, kernel, config, initramfs)"
    echo "     backup-source [kernel]             | Backup the kernel source"
    echo "     backup-kernel [kernel]             | Backup the kernel file"
    echo "     backup-config [kernel]             | Backup the kernel configuration file"
    #echo "     backup-initramfs [kernel]          | Backup the initramfs"
    echo "  <Backup List>                         |"
    echo "     backup-list-source                 | List all backup source kernels"
    echo "     backup-list-kernel                 | List all backup kernels"
    echo "     backup-list-config                 | List all backup kernel configs"
    #echo "     backup-list-initramfs              | List all backup initramfs"
    echo "  <Backup Remove>                       |"
    echo "     backup-remove-source [kernel]      | Remove the backup kernel source"
    echo "     backup-remove-kernel [kernel]      | Remove the backup kernel"
    #echo "     backup-remove-config [kernel]      | Remove the backup kernel config"
    #echo "     backup-remove-initramfs [kernel]   | Remove the backup initramfs"
    #echo "  <Restore>                             |"
    #echo "     restore [kernel]                   | Restore all files (source, kernel, config, initramfs)"
    #echo "     restore-source [kernel]            | Restore the kernel source"
    #echo "     restore-kernel [kernel]            | Restore the kernel from the backup"
    #echo "     restore-config [kernel]            | Restore the kernel configuration"
    #echo "     restore-initramfs [kernel]         | Restore the initramfs"
    echo "  <Others>                              |"
    #echo "     rebuild-initramfs                  | Rebuild all initramfs"
    echo "     update-grub                        | Update grub config"
    #echo "     diff-config [kernel1] [kernel2]    |    Compare two config files"
    echo "     menuconfig [kernel]                | Open the kernel configuration file with menuconfig"
    #echo "     upload [kernel]                    | Upload the kernel to GitHub Gists"
}

#-- Internal functions --#
GetKernelSourceList(){
    DirList "/usr/src" | GetBaseName | grep -E "^linux-"
}

GetCurrentKernel(){
    uname -r
}



GetCurrentKernelSource(){
    GetKernelSourceList | grep "$(GetCurrentKernel)"
}

GetCurrentKernelPath(){
    tr " " "\n" < /proc/cmdline | awk -F "=" '{if($1 = "BOOT_IMAGE"){print $2"\n"; exit}}'
}

GetKernelFileList(){
    FileList "/boot" | GetBaseName | grep -E "^vmlinuz-"
}

# GetKernelFilesToBackup <kernel version>
GetKernelFilesToBackup(){
    local kernel="${1-""}" 
    [[ -z "$kernel" ]] && return 1
    local file exitcode=1
    for file in "${KERNEL_FILES[@]//"%VERSION%"/"$kernel"}"; do
        if [[ -e "$file" ]]; then
            echo "$file"
            exitcode=0
        fi
    done
    return "$exitcode"
}

GetKernelSourceBackupList(){
    FileList "${SOURCE_BACKUP_DIR}" | GetBaseName | grep -E "${ARCHIVE_FORMAT}$" | ForEach CutLastString "{}" "${ARCHIVE_FORMAT}" 
}

GetKernelConfigBackupList(){
    FileList "${CONFIG_BACKUP_DIR}" | GetBaseName | RemoveFileExt
}

GetKernelBackupList(){
    DirList "${KERNEL_BACKUP_DIR}" | GetBaseName
}

BackupFormatToString(){
    local Line Kernel Date
    while read -r Line; do
        Date=$(GetLastSplitString "-" "${Line}")
        Kernel=$(CutLastString "${Line}" "-${Date}")
        echo "${Kernel} ($(date --date "@${Date}" "+%Y-%m-%d %H:%M:%S"))"
    done | sort
}

BackupFormatFromString(){
    local Line Kernel Date
    while read -r Line; do
        #echo "$Line"
        Date=$(GetLastSplitString "(" "${Line}" | sed "s|)||g")
        Kernel=$(CutLastString "${Line}" " (${Date})")
        Date=$(date --date "${Date}" +%s)
        echo "${Kernel}-${Date}"
    done | sort
}

Choice_InstalledKernel(){
    local KernelList=()
    readarray -t KernelList < <(GetKernelFileList)

    if [[ -n "${1:-""}" ]]; then
        if Array.Includes KernelList "$1"; then
            Path="$1"
        fi
    fi

    if [[ -z "${Path:-""}" ]]; then
        local ChoiceArgs=() CurrentKernelPath Path
        CurrentKernelPath="vmlinuz-$(GetCurrentKernel)"
        [[ -n "${CurrentKernelPath}" ]] && ChoiceArgs+=(-d "$CurrentKernelPath")
        ChoiceArgs+=(-p "Please select an installed kernel")
        ChoiceArgs+=("${KernelList[@]}")
        
        Path="$(ChoiceLoop "${ChoiceArgs[@]}")"
    fi
    Path="/boot/$Path"

    if [[ ! -e "${Path}" ]]; then
        Msg.Err "Invalid kernel"
        return 1
    fi
    echo "$Path"
    return 0
}

Choice_Initramfs(){
    local ImagelList=()
    readarray -t ImagelList < <(GetInitramfsFileList)

    if [[ -n "${1:-""}" ]]; then
        if Array.Includes ImagelList "$1"; then
            Path="$1"
        fi
    fi

    if [[ -z "${Path:-""}" ]]; then
        local ChoiceArgs=() CurrentInitramfs Path
        CurrentInitramfs="initramfs-$(GetCurrentKernel).img"
        [[ -e "${CurrentInitramfs}" ]] && ChoiceArgs+=(-d "$CurrentInitramfs")
        ChoiceArgs+=(-p "Please select an initramfs")
        ChoiceArgs+=("${ImagelList[@]}")
        Path="$(ChoiceLoop "${ChoiceArgs[@]}")"
    fi

    Path="/boot/$Path"

    if [[ ! -e "${Path}" ]]; then
        Msg.Err "Invalid kernel"
        return 1
    fi
    echo "$Path"
    return 0
}


# „Ç´„Éº„Éç„É´„ÇΩ„Éº„Çπ„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ„Éï„É´„Éë„Çπ„ÇíËøî„Åó„Åæ„Åô
Choice_KernelSource(){
    local KernelSourceList=()
    readarray -t KernelSourceList < <(GetKernelSourceList)

    if [[ -n "${1:-""}" ]]; then
        if Array.Includes KernelSourceList "$1"; then
            Path="$1"
        fi
    fi

    if [[ -z "${Path:-""}" ]]; then
        local ChoiceArgs=() CurrentKernelSource Path
        CurrentKernelSource="$(GetCurrentKernelSource)"
        [[ -n "${CurrentKernelSource}" ]] && ChoiceArgs+=(-d "$CurrentKernelSource")
        ChoiceArgs+=(-p "Please select a kernel source")
        ChoiceArgs+=("${KernelSourceList[@]}")
        Path="$(ChoiceLoop "${ChoiceArgs[@]}")"
    fi

    Path="/usr/src/$Path"

    if [[ ! -e "${Path}" ]]; then
        Msg.Err "Invalid kernel source"
        return 1
    fi
    echo "$Path"
    return 0
}

Choice_KernelSourceBackup(){
    local KernelSourceBackupList=()
    readarray -t KernelSourceBackupList < <(GetKernelSourceBackupList)

    if [[ -n "${1:-""}" ]]; then
        if Array.Includes KernelSourceBackupList "$1"; then
            Path="${1}"
        fi
    fi

    if [[ -z "${Path:-""}" ]]; then
        local ChoiceArgs=() Path
        ChoiceArgs+=(-p "Please select a kernel source backup")
        ArrayAppend ChoiceArgs < <(PrintArray "${KernelSourceBackupList[@]}" | BackupFormatToString)
        Path="$(ChoiceLoop "${ChoiceArgs[@]}" | BackupFormatFromString)"
    fi

    Path="${SOURCE_BACKUP_DIR%/}/${Path}.${ARCHIVE_FORMAT#"."}"

    if [[ ! -e "${Path}" ]]; then
        Msg.Err "Invalid kernel source"
        return 1
    fi
    echo "$Path"
    return 0
}

Choice_KernelConfigBackup(){
    local KernelConfigBackupList=()
    readarray -t KernelConfigBackupList < <(GetKernelConfigBackupList)

    if [[ -n "${1:-""}" ]]; then
        if Array.Includes KernelConfigBackupList "$1"; then
            Path="${1}"
        fi
    fi

    if [[ -z "${Path:-""}" ]]; then
        local ChoiceArgs=() Path
        ChoiceArgs+=(-p "Please select a kernel config backup")
        ArrayAppend ChoiceArgs < <(PrintArray "${KernelConfigBackupList[@]}" | BackupFormatToString)
        Path="$(ChoiceLoop "${ChoiceArgs[@]}" | BackupFormatFromString)"
    fi

    Path="${CONFIG_BACKUP_DIR%/}/${Path}.config"

    if [[ ! -e "${Path}" ]]; then
        Msg.Err "Invalid kernel config"
        return 1
    fi
    echo "$Path"
    return 0
}

Choice_KernelBackup(){
    local KernelBackupList=()
    readarray -t KernelBackupList < <(GetKernelBackupList)

    if [[ -n "${1:-""}" ]]; then
        if Array.Includes KernelBackupList "$1"; then
            Path="${1}"
        fi
    fi

    if [[ -z "${Path:-""}" ]]; then
        local ChoiceArgs=() Path
        ChoiceArgs+=(-p "Please select a kernel backup")
        ChoiceArgs+=("${KernelBackupList[@]}")
        Path="$(ChoiceLoop "${ChoiceArgs[@]}")"
    fi

    Path="${KERNEL_BACKUP_DIR%/}/${Path}"

    if [[ ! -e "${Path}" ]]; then
        Msg.Err "Invalid kernel backup"
        return 1
    fi
    echo "$Path"
    return 0
}

MakeTarBall(){
    (
        cd "$1" || exit 1
        mkdir -p "$(dirname "$2")"
        tar -z -c -v -f "$2" ./
    )
}

RequireRootPermission(){
    if (( UID != 0 )); then
        Msg.Err "This command requires root permission"
        return 1
    fi
    return 0
}

OptionEnabled_Raw(){
    Bool "${ListCommand_Options_Raw}"
}

OptionEnabled_Latest(){
    Bool "${ListCommand_Options_Latest}"
}


#-- General command --#
Command_General_Help(){
    HelpDoc
}

Command_General_Version(){
    echo "Kernel manager for any Linux distrobution"
    echo "Version: ${PRODUCT_VERSION}"
    echo "License: MIT SUSHI-WARE LICENSE"
    echo "Written by Yamada Hayao"
}

#-- List command --#
Command_List_Source(){
    GetKernelSourceList
}

Command_List_Kernel(){
    GetKernelFileList
}

#-- Build command --#
Command_Build_Kernel(){
    RequireRootPermission || return 1
    local KernelSourcePath KernelSourceName
    KernelSourcePath="$(Choice_KernelSource "${1:-""}")" || return 1
    KernelSourceName="$(basename "$KernelSourcePath")"
    
    (
        Msg.Info "Building kernel: $KernelSourceName"
        Msg.Info "Directory: $KernelSourcePath"
        cd "$KernelSourcePath" || exit 1
        make -j "$(nproc)"
    ) || Msg.Err "Failed to build kernel: $KernelSourceName"
}

#-- Backup command --#
Command_Backup_Source(){
    RequireRootPermission || return 1

    local SelectedKernelSource
    SelectedKernelSource="$(Choice_KernelSource "${1:-""}")"
    Msg.Info "Backing up the kernel source..."

    local TarBallPath
    TarBallPath="${SOURCE_BACKUP_DIR}/$(basename "${SelectedKernelSource}")-$(date +%s).tar.gz"
    MakeTarBall "${SelectedKernelSource}" "${TarBallPath}"
    Msg.Info "Created kernel source backup: ${TarBallPath}"
    return 0
}

Command_Backup_Config(){
    RequireRootPermission || return 1

    local SelectedKernelSource
    SelectedKernelSource="$(Choice_KernelSource "${1:-""}")"
    Msg.Info "Backing up the kernel config..."

    local ConfigPath
    ConfigPath="${CONFIG_BACKUP_DIR}/$(basename "${SelectedKernelSource}")-$(date +%s).config"
    mkdir -p "$(dirname "${ConfigPath}")"
    cp "${SelectedKernelSource}/.config" "${ConfigPath}"
    Msg.Info "Created kernel config backup: ${ConfigPath}"
    return 0
}

Command_Backup_Kernel(){
    RequireRootPermission || return 1

    local SelectedKernel
    SelectedKernel="$(basename "$(Choice_InstalledKernel "${1:-""}")" | sed "s|^vmlinuz-||g")"
    Msg.Info "Backing up the kernel..."

    local File BackupPath CurrentTime
    CurrentTime="$(date +%s)"
    while read -r File; do
        BackupPath="${KERNEL_BACKUP_DIR%/}/linux-${SelectedKernel}-${CurrentTime}/$(basename "${File}")"
        mkdir -p "$(dirname "${BackupPath}")"
        cp "${File}" "${BackupPath}"
        Msg.Info "Created kernel backup: ${BackupPath}"
    done < <(GetKernelFilesToBackup "${SelectedKernel}")
    return 0
}

#-- Backup list command --#

# Command_Backup_List_Internal_Latest <Command to get backup file name list>
Command_Backup_List_Internal_Latest(){
    local FileList=()
    readarray -t FileList < <("$@")

    # shellcheck disable=SC2016
    while read -r Kernel; do
        Array.Print "${FileList[@]}" | grep "${Kernel}-" | sort -n | tail -n 1
    done < <(Array.ForEach FileList eval 'CutLastString "{}" "-$(GetLastSplitString "-" "{}")"' | uniq)
}

Command_Backup_List_Internal_All(){
    BackupFormatToString < <("$@")
}

## Backup list  source 
Command_Backup_List_Source_All_Raw(){ GetKernelSourceBackupList; }
Command_Backup_List_Source_Latest(){ Command_Backup_List_Internal_Latest GetKernelSourceBackupList; }
Command_Backup_List_Source_All(){ Command_Backup_List_Internal_All GetKernelSourceBackupList; }
Command_Backup_List_Source(){
    if OptionEnabled_Latest; then
        if OptionEnabled_Raw; then
            Command_Backup_List_Source_Latest_Raw # TODO: Implement
        else
            Command_Backup_List_Source_Latest
        fi
        return 0
    fi

    if OptionEnabled_Raw; then
        Command_Backup_List_Source_All_Raw
    else
        Command_Backup_List_Source_All
    fi
}

## Backup list config
Command_Backup_List_Config_All_Raw(){ GetKernelConfigBackupList; }
Command_Backup_List_Config_Latest(){ Command_Backup_List_Internal_Latest GetKernelConfigBackupList; }
Command_Backup_List_Config_All(){ Command_Backup_List_Internal_All GetKernelConfigBackupList; }
Command_Backup_List_Config(){
    if OptionEnabled_Latest; then
        if OptionEnabled_Raw; then
            Command_Backup_List_Config_Latest_Raw # TODO: Implement
        else
            Command_Backup_List_Config_Latest
        fi
        return 0
    fi

    if OptionEnabled_Raw; then
        Command_Backup_List_Config_All_Raw
    else
        Command_Backup_List_Config_All
    fi
}

# Backup list kernel
Command_Backup_List_Kernel_All_Raw(){ GetKernelBackupList; }
Command_Backup_List_Kernel_Latest(){ Command_Backup_List_Internal_Latest GetKernelBackupList; }
Command_Backup_List_Kernel_All(){ Command_Backup_List_Internal_All GetKernelBackupList; }
Command_Backup_List_Kernel(){
    if OptionEnabled_Latest; then
        if OptionEnabled_Raw; then
            Command_Backup_List_Kernel_Latest_Raw # TODO: Implement
        else
            Command_Backup_List_Kernel_Latest
        fi
        return 0
    fi

    if OptionEnabled_Raw; then
        Command_Backup_List_Kernel_All_Raw
    else
        Command_Backup_List_Kernel_All
    fi
}

#-- Backup remove command --#
Command_Backup_Remove_Source(){
    RequireRootPermission || return 1
    Choice_KernelSourceBackup "${1:-""}" | xargs rm -f
}

Command_Backup_Remove_Kernel(){
    RequireRootPermission || return 1
    Choice_KernelBackup "${1:-""}" | xargs rm -fr
}

Command_Backup_Remove_Config(){
    RequireRootPermission || return 1
    Choice_KernelConfigBackup "${1:-""}" | xargs rm -f
}

#-- Menuconfig --#
Command_MenuConfig(){
    RequireRootPermission || return 1
    local KernelSourcePath
    KernelSourcePath="$(Choice_KernelSource "${1:-""}")" || return 1
    (
        cd "$KernelSourcePath" || exit 1
        make menuconfig
    ) || Msg.Err "Failed to open menuconfig"
}

Command_UpdateGrub(){
    RequireRootPermission || return 1
    Msg.Info "Updating grub..."
    grub-mkconfig -o "/boot/grub/grub.cfg"
}

#-- Parse options --#
ParseArg SHORT="h" LONG="help,raw,latest" -- "${@}" || exit 1
eval set -- "${OPTRET[*]}"
unset OPTRET

while true; do
    case "${1}" in
        --latest)
            ListCommand_Options_Latest=true
            shift 1
            ;;
        --raw)
            ListCommand_Options_Raw=true
            shift 1
            ;;
        -h | --help)
            HelpDoc
            exit 0
            ;;
        --)
            shift 1
            break
            ;;
        *)
            Msg.Err "Argument exception error '${1}'"
            Msg.Err "Please report this error to the developer." 1
            ;;
    esac
done

Command="${1:-""}"
shift 1 || true

# „É°„É¢
# „ÉªÈñ¢Êï∞ÂÜÖ„Åßexit„Åó„Å™„ÅÑ„Åì„Å®
# „ÉªÂÖ®„Å¶„ÅÆÈñ¢Êï∞„Å´"$@"„ÇíÊ∏°„Åô„Åì„Å®
case "${Command-:""}" in
    # General command
    help | "")
        Command_General_Help "$@"
        ;;
    version)
        Command_General_Version "$@"
        ;;
    # List command
    list-source)
        Command_List_Source "$@"
        ;;
    list-kernel)
        Command_List_Kernel "$@"
        ;;
    # Build command
    build-kernel)
        Command_Build_Kernel "$@"
        ;;
    # Backup command
    backup-source | baks)
        Command_Backup_Source "$@"
        ;;
    backup-config | bakc)
        Command_Backup_Config "$@"
        ;;
    backup-kernel | bakk)
        Command_Backup_Kernel "$@"
        ;;
    # Backup List command
    backup-list-source | bakls)
        Command_Backup_List_Source "$@"
        ;;
    backup-list-config | baklc)
        Command_Backup_List_Config "$@"
        ;;
    backup-list-kernel | baklk)
        Command_Backup_List_Kernel "$@"
        ;;
    # Backup Remove command
    backup-remove-source | bakrs)
        Command_Backup_Remove_Source "$@"
        ;;
    backup-remove-kernel | bakrk)
        Command_Backup_Remove_Kernel "$@"
        ;;
    backup-remove-config | bakrc)
        Command_Backup_Remove_Config "$@"
        ;;
    # Menuconfig command
    menuconfig)
        Command_MenuConfig "$@"
        ;;
    # Update grub command
    update-grub)
        Command_UpdateGrub "$@"
        ;;
    *)
        Msg.Err "No such command ( '${Command-""}' )"
        Msg.Err "Please see help with 'help' command"
        Msg.Err "If you think this is a bug, please report it to the developer."
        exit 1
        ;;
esac
